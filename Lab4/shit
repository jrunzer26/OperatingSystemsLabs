/*
 * Host Dispatcher Shell Project for SOFE 3950U / CSCI 3020U: Operating Systems
 *
 * Copyright (C) 2015, <GROUP MEMBERS>
 * All rights reserved.
 * 
 */
#include <stdio.h>
#include <stdlib.h>

#include "utility.h"
#include "queue.h"


#define MAX_PRINTERS 2
#define MAX_MODEMS 1
#define MAX_SCANNERS 1
#define MAX_CD 2
 int availableMem2 = 1024;
 int memtest = 0;

// Define your utility functions here, you will likely need to add more...
// int alloc_mem(resources res, int size)
// {
//      ...
// }

 bool allocate_resources(resources *resource, proc tempProc) {
 	resource = malloc(sizeof(resources));

 	if (tempProc.suspended) {
 		printf("Already allocated resources.\n");
 		return true;
 	}
	//Check if the resource needs to be allocated, and if there is enough resources to allocate.
 	if (tempProc.r.printers != 0 | |tempProc.r.scanners != 0
 		|| tempProc.r.modems != 0 || tempProc.r.cds != 0) {
 		if (tempProc.r.printers <= resource -> printers
 			&& tempProc.r.scanners <= resource -> scanners
 			&& tempProc.r.modems <= resource -> modems
 			&& tempProc.r.cds <= resource -> cds) {

 			resource->printers = resource->printers - tempProc.r.printers;
 		resource->scanners = resource->scanners - tempProc.r.scanners;
 		resource->modems = resource->modems - tempProc.r.modems;
 		resource->cds = resource->cds - tempProc.r.cds;
 	} else {
 		printf("Failed to allocate resources: %d\n", tempProc.pid);
 		return false;
 	}
 }
	//sleep(4);
 printf("Allocate resources\n");
 return true;
}

bool return_resources(resources *resource, proc tempProc) {
	resource = malloc(sizeof(resources));

	printf("Printers: %d, %d \n", resource->printers, tempProc.r.printers);
	printf("Scanners: %d, %d \n", resource->scanners, tempProc.r.scanners);
	printf("Modems: %d, %d \n", resource->modems, tempProc.r.modems);
	printf("CDs: %d, %d \n", resource->cds, tempProc.r.cds);

	//Ensure that re-allocating resource will not exceed original amount. If not, re-allocate
	if (resource->printers + tempProc.r.printers <= MAX_PRINTERS
		&& resource->scanners + tempProc.r.scanners <= MAX_SCANNERS
		&& resource->modems + tempProc.r.modems <= MAX_MODEMS
		&& resource->cds + tempProc.r.cds <= MAX_CD) {
		printf("Returning %d printers, %d scanners, %d modems, and %d cds\n",
			tempProc.r.printers, tempProc.r.scanners, tempProc.r.modems,
			tempProc.r.cds);
	resource->printers = resource->printers + tempProc.r.printers;
	resource->scanners = resource->scanners + tempProc.r.scanners;
	resource->modems = resource->modems + tempProc.r.modems;
	resource->cds = resource->cds + tempProc.r.cds;
} else {
	printf("Error: Too many resources\n");
	return false;
}
return true;
}

//deallocated the memory that is specified for the current process
void deallocateMem(resources res, proc tempProc) {
	//this needs to change
	printf(res->printers);
	printf("deallocating memory for : %d\n",tempProc.pid);
	printf("De-allocating starting from: %d\n", tempProc.address);
	printf("De-allocating to: %d\n", tempProc.address + tempProc.res);

	// the fuck is this shit
	/*
	for (int i = 0; i < tempProc.memory; i++) {
		memory[i + tempProc.address] = 0;
	}
	*/

	availableMem2 = availableMem2 + tempProc.res;
	printf("available memory: %d", availableMem2);
}

//allocates memory for the current process. returns true if successful, false otherwise
bool allocateMemory(resources res, int size, proc *tempProc) {
	printf("Trying to allocate memory for : %d\n",tempProc->pid);
	//already has allocated memory
	if (tempProc->suspended) { 
		printf("Memory already allocated\n");
		return true;
	}
	sleep(1); // used to delay the output so the prints for each process when running looks normal
	int allocated = 0; //the number of allocated spots possible
	int start = 0; //the starting position of a valid address for a proc
	
	//this needs to change
	
	for(int i = 0; i < size; i++){
		printf("%d",res[i]);
	}


	int a = 0;

	if (tempProc->priority > 0) {
		a = 64;
		start = 64;
	}
	//go through the size of the array and check each number for unallocated spaces
	for (int i = a; i < size; i++) {

		//this needs to change
		if (res[i] == 1) {
			allocated = 0;
			start = i + 1; //reset the start address

		} else {
			allocated++;

		}
		printf("\n\nCurrently, %d entries in res are filled.\n\n", memtest);
		//check if the total space is free for the proc
			//this needs to change
		if (allocated == tempProc->res) {

			tempProc->address = start; //set the address of the proc

			//allocate the res for the proc
			for (int k = 0; k < tempProc->res; k++) {
				res[k + tempProc->address] = 1;

			}
			/*
			 for(int i = 0; i < size; i++){
			 printf("%d",res[i]);
			 }
			 */
			 return true;
			}

		}
	//return false;
		printf("\nNOT ENOUGH MEMORY\n");
		return false;
	}

//asdasda
//loads the dispatch list into the given queue
//tempProc is used to make sure the numbers for the process are not deleted
	void load_dispatch(char *dispatch_file, node_t *queue, proc tempProc) {
		size_t len = 0;
		ssize_t read;
		char *line = NULL;

	//open the file to get the processes
		FILE *fp = fopen(dispatch_file, "r");

		if (!fp) {
			printf("Error opening file");
		}

	//go though the text file and add each process to the list
		while ((read = getline(&line, &len, fp)) != -1) {
		//tokenize the line with , to get each entity of the process
			char * tokens = NULL;
			tokens = strtok(line, ",\n");
			tempProc.arrivalTime = atoi(tokens);
			tokens = strtok(NULL, ",\n");
		tempProc.priority = atoi(tokens); //atoi casts a char * to an integer
		tokens = strtok(NULL, ",\n");
		tempProc.runtime = atoi(tokens);
		tokens = strtok(NULL, ",\n");
		tempProc.memory = atoi(tokens);
		tokens = strtok(NULL, ",\n");
		tempProc.r.printers = atoi(tokens);
		tokens = strtok(NULL, ",\n");
		tempProc.r.scanners = atoi(tokens);
		tokens = strtok(NULL, ",\n");
		tempProc.r.modems = atoi(tokens);
		tokens = strtok(NULL, ",\n");
		tempProc.r.cds = atoi(tokens);
		tempProc.pid = 0;
		tempProc.address = 0;
		tempProc.suspended = false;

		push(queue, tempProc); //push the process to the list

	}
	//free everything
	fclose(fp);
	free(line);

}

//prints the process that is given
void printProc(proc *pro) {

	if (pro != NULL) {
		printf(
			"Arrival Time: %d\nProcess ID: %d\nPriority: %d\nProcessor Time Remaining: %d\nMemory Location: %d\nBlock Size: %d\nResources Requested : Printers: %d Scanners: %d Modems: %d CDs: %d\n\n",
			pro->arrivalTime, pro->pid, pro->priority, pro->runtime,
			pro->address, pro->memory, pro->r.printers, pro->r.scanners,
			pro->r.modems, pro->r.cds);
	}
}

